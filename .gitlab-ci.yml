image: golang:latest

cache:
  paths:
    - /apt-cache
    - /go/src/github.com
    - /go/src/golang.org
    - /go/src/google.golang.org
    - /go/src/gopkg.in

stages:
  - build
  - test
  - release

variables:
  CONTAINER_TEST_IMAGE: docker.tsi-dev.otc-service.com/tsi-automation/inspec_exporter:$CI_BUILD_REF_NAME
  CONTAINER_RELEASE_IMAGE: docker.tsi-dev.otc-service.com/tsi-automation/inspec_exporter:latest

before_script:
  - apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
  - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
  - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
  - apt-get update && apt-get install -y docker-ce
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN docker.tsi-dev.otc-service.com
#  - sudo -S apt install golang
#  - export GOROOT="/usr/lib/go"
#  - export GOPATH="/gopath"
#  - export GOBIN="/gopath/bin"
#  - export PATH="$PATH:$GOROOT/bin:$GOPATH/bin"
  - go get -u github.com/golang/dep/cmd/dep
  - mkdir -p $GOPATH/src
  - cd $GOPATH/src
  - ln -s $CI_PROJECT_DIR
  - cd $CI_PROJECT_NAME
  - dep ensure

style:
  stage: build
  script:
    - make style
    
format:
  stage: build
  script:
    - make format
    
vet:
  stage: build
  script:
    - make vet

build:
  stage: build
  script:
    - make build
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

#test:
#  stage: test
#  script:
#    - make test

release-image:
  stage: release
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - master
